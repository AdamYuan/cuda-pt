cmake_minimum_required(VERSION 3.24 FATAL_ERROR)

set(PROJ_NAME "cuda-pt")
project(${PROJ_NAME} LANGUAGES CUDA CXX)

set(CUDA_COMMON_FLAGS --expt-relaxed-constexpr)

find_package(Threads REQUIRED)
find_package(OpenMP REQUIRED)
IF("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR "${CMAKE_BUILD_TYPE}" STREQUAL "debug" OR "${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG")
	set(CMAKE_BUILD_TYPE Debug)
	if (MSVC)
		set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -maxrregcount=40 -lineinfo -arch=native -g -G")
		set(CMAKE_CUDA_FLAGS_DEBUG "${CMAKE_CUDA_FLAGS_DEBUG} -G -g -lineinfo")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /g /Od /Zi /MDd")
	else()
		set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wall -G -O0 -lineinfo -maxrregcount=40 -arch=native")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -g -O0")
	endif ()
    set(CUDA_CONFIG_FLAGS -G)
ELSE()
	set(CMAKE_BUILD_TYPE Release)
	if (MSVC)
		if (OPENMP_FOUND)
			set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /openmp")
			set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp")
			set (CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xcompiler /openmp")
		endif()
		set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -maxrregcount=40 -lineinfo -arch=native")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
	else()
		set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O3 --maxrregcount=40 -lineinfo -arch=native")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
		if (OPENMP_FOUND)
			set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
			set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
			set (CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} ${OpenMP_CXX_FLAGS}")
		endif()
	endif ()
	set(CUDA_CONFIG_FLAGS --use_fast_math -Xptxas -O3)
ENDIF()
set(CUDA_FINAL_FLAGS ${CUDA_COMMON_FLAGS} ${CUDA_CONFIG_FLAGS})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)

include_directories(
	${CMAKE_CURRENT_LIST_DIR}/src 
	${CMAKE_CURRENT_LIST_DIR}/src/ext/imgui
	${CMAKE_CURRENT_LIST_DIR}/src/ext/glfw/include
)

add_subdirectory(src/ext/tinyxml2)
add_subdirectory(src/ext/tinyobjloader)
add_subdirectory(src/ext/imgui)
add_subdirectory(src/ext/glfw)

find_package(OpenGL REQUIRED)
if (MSVC)
	list(APPEND CMAKE_PREFIX_PATH "E:\\glew-2.2.0\\glew")
	set(GLEW_USE_STATIC_LIBS false)
	find_package(GLEW REQUIRED)
else()
	find_package(GLEW REQUIRED)
endif()

aux_source_directory(src/impl CPT_IMPL_SRC)
aux_source_directory(src/pt_impl CPT_PT_IMPL_SRC)
aux_source_directory(src/viewer_impl CPT_VIEWER_IMPL_SRC)

set(EXEC2_NAME "cpt")
add_executable(${EXEC2_NAME}
	app/viewer.cu
	${CPT_VIEWER_IMPL_SRC}
	${CPT_IMPL_SRC}
	${CPT_PT_IMPL_SRC}
)

target_link_libraries(
	${EXEC2_NAME} PRIVATE
	tinyxml2 tinyobjloader
	GLEW::glew
	glfw
	imgui
	${OPENGL_gl_LIBRARY}
)

set_target_properties(
	${EXEC2_NAME} PROPERTIES
	CUDA_SEPARABLE_COMPILATION ON
	CUDA_ARCHITECTURES native
)

target_compile_options(
	${EXEC2_NAME} PRIVATE
	$<$<COMPILE_LANGUAGE:CUDA>:${CUDA_FINAL_FLAGS}>
)